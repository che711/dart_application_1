void main() {
  var a = 'just data';
  // Dart - однопоточный язык программирования. 
  // Причем этот единственный поток работает в изолированном режиме - изоляте.
  // Изолят - это пространство на машине с собственным участком памяти и одним потоком,
  // который имеет свой цикл событий и весь код в Dart запускается в этом 
  // цикле событий (изоляте) и все задачи как синхронные так и асинхронные.
  // Но это не означает, что невозможно запускать задачи в другом потоке
  // Android/iOS могут выполнять некторую работу по запросу Dart-a. Например, когад мы
  // просим прочитать файл через Dart, то это делает не сам язык, а операционная система
  // и как только чтение закончено, Dart планирует очередь событий 
  // (большая часть ввода/вывода из библиотеки dart.io происходит именно так)
  // Другой способ - создать новый изолят со своей памятью, потоком и циклом событий, 
  // который работает параллельно с основным. Эти потоки могут общаться друг с другом 
  // только через сообщения и не имеют доступа к памяти друг друга
  // Dart Event Loop - используте очередь событий (основоной поток и микрозадачи) где
  // первый пришел - первый ушел

  // print("");
  // print('Первая задача - синхронная');
  // Future(()=> print('Вторая задача - очередь событий'));
  // Future.microtask(()=> print('Третья задача - очередь микрозадач'));
  // print('Четвертая задача - синхронная');

  print("");
  print('Первая задача - синхронная');
  Future(()=> print('Пятая задача - очередь событий')).then((value)=> print('Шестая задача - синхронная'));
  Future(()=> print('Вторая задача - очередь событий'));
  Future.microtask(()=> print('Третья задача - очередь микрозадач'));
  print('Четвертая задача - синхронная');

  // Каждый изолят содержит Event loop - вечный цикл, выполняющий все
  // поступающие задачи (синхронные и асинхронные)
  // Есть две FIFO очереди задач - микрозадачи и события
  // Очередь микрозадач имеет приоритет над очередью событий и опустошается первой,
  // после выполнения синхронных задач
  // Очередь событий начинает выполнять задачи последовательно после
  // выполнения микрозадач

}
